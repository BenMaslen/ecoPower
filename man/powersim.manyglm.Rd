% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powersim_manyglm.R
\name{powersim.manyglm}
\alias{powersim.manyglm}
\title{Provide power estimates for multivariate abundance models}
\usage{
powersim.manyglm(
  fit,
  N,
  coeffs = coef(fit),
  pred,
  nsim = 1000,
  test = "score",
  alpha = 0.05,
  use.design = TRUE,
  newdata = NULL,
  cl = makeCluster(detectCores()),
  coeff.null = effect.null(fit, pred)
)
}
\arguments{
\item{fit}{objects of class `manyglm`, typically the result of a call to \link[mvabund]{manyglm}.}

\item{N}{Number of samples for power estimate.}

\item{coeffs}{Coefficient matrix for a `manyglm` object that characterises the size of effects to be simulated.
See `effect.alt` for help in producing this matrix. Defaults to the coefficient matrix from the inputed `manyglm`
object `coef(fit)`.}

\item{pred}{Name of predictor of interest in quotes.}

\item{nsim}{Number of simulations for power estimate to be based upon. Defaults to 1000.}

\item{test}{Test statistic for power estimate to based upon. Defaults to "score", however "wald" is also allowed.}

\item{alpha}{Type I error rate for power estimate, defaults to 0.05.}

\item{use.design}{Logical. Wether to utilise the design of the inputed `manyglm` object or the design specified by
the data frame `newdata`.}

\item{newdata}{Data frame of same size as the original data frame from the inputed `manyglm` fit, that specifies
a different design of interest.}

\item{cl}{Number of clusters for parrelel computing. Defaults to the total number of clusters available on the
machine.}

\item{coeff.null}{Coefficient matrix under the null hypothesis. Defaults to being specified by \link[ecopower]{effect.null}.}
}
\description{
`powersim.manyglm` returns a power estimate for a `manyglm` object for a given sample size `N`
and effect size of interest.
}
\details{
`powersim.manyglm` takes a `manyglm` object, sample size `N` and coefficient matrix `coef` which
specifies an effect size of interest and returns a power estimate.

The power estimate is obtained by first parsing the inputed `manyglm` object into \link[ecopower]{extend.manyglm},
`nsim` times with an effect size specified by `coeff`. Next, the `manyglm` object is parsed into
`extend.manyglm` an additional `nsim` times with a null effect, which is defined by default by
 \link[ecopower]{effect.null}. This effectively simulates `nsim` `manyglm` models under both the null
 and alternative hypothesis.

 For each simulated `manyglm` object a test statistic `test` is obtained. A critical test statistic
 is then obtained as the upper 1 - `alpha` quantile of simulated test statistics under the null
 hypothesis. Power is then estimated as the proportion of times the test statistics simulated under
 the alternative hypothesis exceed the critical test statistic under the null.

 To improve computation time, simulations are computed in parrellel using the 'socket' approach, which
 be default uses all available cores for clustering. If the function returns an error relating to
 clustering or nodes, it is recommended to use 1 less than the number of available cores for your
 machine; makeCluster(detectCores()-1).
}
\examples{
library(mvabund)
data(spider)
spiddat <- mvabund(spider$abund)
X <- data.frame(spider$x)

#Specify 'increasers' and 'decreasers'
increasers <- c("Alopacce","Arctlute" ,"Arctperi","Pardnigr", "Pardpull")
decreasers <- c("Alopcune","Alopfabr" ,"Zoraspin")

#Find power for continuous predictor, N=20 and effect.size=3
glm.spid <- manyglm(spiddat~soil.dry, family="negative.binomial",data=X)
effect.mat <- effect.alt(glm.spid,effect.size=3,
       pred="soil.dry",increasers,decreasers)
#powersim.manyglm(glm.spid,N=20,pred="soil.dry",coeffs=effect.mat)

#Find power for categorical predictor with 4 levels, N=10, effect.size=1.5
X$Treatment <- rep(c("A","B","C","D"),each=7)
glm.spid <- manyglm(spiddat~Treatment, family="negative.binomial",data=X)
effect.mat <- effect.alt(glm.spid,effect.size=1.5,
       pred="Treatment",increasers,decreasers)
#powersim.manyglm(glm.spid,N=20,pred="Treatment",coeffs=effect.mat)

#change effect size parameterisation
effect.mat <- effect.alt(glm.spid,effect.size=1.5,
                         pred="Treatment",increasers,decreasers,
                         K=c(3,1,2),OrderedLevels = FALSE)
#powersim.manyglm(glm.spid,N=20,pred="Treatment",
#                 coeffs=effect.mat)

#change sampling design
X_new <- X
X_new$Treatment[6:7] <- c("B","B")
#powersim.manyglm(glm.spid,N=20,pred="Treatment",
#    coeffs=effect.mat,use.design = FALSE,newdata=X_new)
}
